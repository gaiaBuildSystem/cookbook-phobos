#
# Copyright 2025 MicroHobby
#
# Reference boot script.

echo "Booting Reference ..."
saveenv

setenv bootlimit 3

# check if loglevel is set
if env exists loglevel
    then
        echo "loglevel is set to ${loglevel}"
    else
        setenv loglevel 3
fi

if env exists bootcount
    then
        echo "bootcount is ${bootcount}"
    else
        setenv bootcount 1
fi

setexpr bootcount $bootcount + 1
saveenv

ext4load efi 0:2 ${scriptaddr} boot/uEnv.txt
env import -t ${scriptaddr} ${filesize}

if test "${rollback}" = "1" && test "${upgrade_available}" = "1"
    then
        # Make sure to reset upgrade_available to avoid unnecessary wear
        # Note this also makes rollback permanent. aktualizr will reset rollback
        # when a new (hopefully better) update comes in.
        env set upgrade_available 0
        setenv bootcount 0
        saveenv
fi

if test $bootcount -gt $bootlimit
    then
        echo "Bootcount exceeded, applying rollback"
        setenv bootcount 0
        saveenv

        setenv kernel_image ${kernel_image2}
        setenv ramdisk_image ${ramdisk_image2}
        setenv bootargs ${bootargs2}
        setenv bootargs ${bootargs} rollback=1
fi

env set bootargs ${bootargs} root=LABEL:otaroot rootfstype=ext4
env set bootargs ${bootargs} console=ttyS0,115200
env set bootargs ${bootargs} logo.nologo vt.global_cursor_default=0
env set bootargs ${bootargs} ignore_loglevel earlycon
env set bootargs ${bootargs} ${extraargs}

# loads the kernel and the initramfs
ext4load efi 0:2 ${kernel_addr_r} ${kernel_image}
env set kernel_size ${filesize}
ext4load efi 0:2 ${ramdisk_addr_r} ${ramdisk_image}
env set ramdisk_size ${filesize}

zboot ${kernel_addr_r} ${kernel_size} ${ramdisk_addr_r} ${ramdisk_size}
